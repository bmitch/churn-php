name: "Continuous Integration"

on:
  push:
    paths-ignore:
      - '**.md'
      - 'img/**'
  pull_request:
    paths-ignore:
      - '**.md'
      - 'img/**'
  # Allow manually triggering the workflow
  workflow_dispatch:

jobs:
  tests:
    name: "CI"
    runs-on: ${{ matrix.os }}
    # We want to run on external PRs, but not on our own internal PRs as they'll be run by the push to the branch.
    if: ${{ !(github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) }}

    strategy:
      matrix:
        php-version:
          - "7.1"
          - "7.2"
          - "7.3"
          - "7.4"
          - "8.0"
          - "8.1"
        os:
          - ubuntu-latest
          - windows-latest

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "none"
          ini-values: "error_reporting=-1, display_errors=On, display_startup_errors=On, zend.assertions=1"
          php-version: "${{ matrix.php-version }}"
          tools: composer:v2

      - name: Get composer cache directory
        id: composercache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache composer dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composercache.outputs.dir }}
          key: composer-${{ runner.os }}-${{ matrix.php-version }}-${{ hashFiles('composer.*') }}
          restore-keys: |
            composer-${{ runner.os }}-${{ matrix.php-version }}-
            composer-${{ runner.os }}-
            composer-

      - name: "Install dependencies"
        run: |
          composer update --no-interaction --no-scripts --no-progress --prefer-dist
          composer bin php-parallel-lint update --no-interaction --no-progress --prefer-dist

      - name: "Check PHP syntax"
        run: "vendor/bin/parallel-lint src tests"

      - name: "Run tests"
        run: "vendor/bin/simple-phpunit --colors=always --testdox"

      - name: "Run Churn"
        run: "php bin/churn run src -p -vvv"

  test-vcs:
    name: "Test VCS"
    runs-on: ubuntu-latest
    # We want to run on external PRs, but not on our own internal PRs as they'll be run by the push to the branch.
    if: ${{ !(github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) }}

    strategy:
      matrix:
        vcs:
          - fossil
          - mercurial
          - subversion

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "none"
          ini-values: "error_reporting=-1, display_errors=On, display_startup_errors=On, zend.assertions=1"
          php-version: "8.0"
          tools: composer:v2

      - name: Get composer cache directory
        id: composercache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache composer dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composercache.outputs.dir }}
          key: composer-${{ runner.os }}-8.0-${{ hashFiles('composer.*') }}
          restore-keys: |
            composer-${{ runner.os }}-8.0-
            composer-${{ runner.os }}-
            composer-

      - name: "Install dependencies"
        run: "composer update --no-interaction --no-scripts --no-progress --prefer-dist"

      - name: "Build Docker image"
        run: "docker build -t ${{ matrix.vcs }} -f tests/docker/${{ matrix.vcs }}/Dockerfile tests/docker/${{ matrix.vcs }}"

      - name: "Run tests"
        run: |
          vcs=${{ matrix.vcs }}
          docker run -i --rm -v $PWD:/churn ${{ matrix.vcs }} /churn/vendor/bin/simple-phpunit -c /churn/phpunit.xml.dist /churn/tests/EndToEnd/${vcs^}Test.php --coverage-clover=/churn/coverage-${{ matrix.vcs }}.xml
          sed -i 's/\/churn\/src/\/home\/runner\/work\/${{ github.event.repository.name }}\/${{ github.event.repository.name }}\/src/g' coverage-${{ matrix.vcs }}.xml

      - uses: actions/upload-artifact@v2
        with:
          name: coverage
          path: ./coverage-${{ matrix.vcs }}.xml

  analysis:
    name: "Static Analysis"
    runs-on: ubuntu-latest
    # Run after "test-vcs" to gather all code coverage reports
    needs: [test-vcs]

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "pcov"
          ini-values: "error_reporting=-1, display_errors=On, display_startup_errors=On, zend.assertions=1"
          php-version: "8.0"
          tools: composer:v2, composer-normalize

      - name: Get composer cache directory
        id: composercache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache composer dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composercache.outputs.dir }}
          key: composer-${{ runner.os }}-8.0-${{ hashFiles('composer.*') }}
          restore-keys: |
            composer-${{ runner.os }}-8.0-
            composer-${{ runner.os }}-
            composer-

      - name: "Validate composer.json"
        run: "composer validate --strict"

      - name: "Install dependencies"
        run: "composer update --no-interaction --no-progress --prefer-dist"

      - name: "Run PHP Mess Detector"
        run: "vendor/bin/phpmd src text phpmd.xml"

      - name: "Run PHPLOC"
        run: "vendor/bin/phploc src"

      - name: "Run PHP Copy/Paste Detector"
        run: "vendor/bin/phpcpd src"

      - name: "Run Psalm"
        run: "vendor/bin/psalm --php-version=8.0 --show-info=true"

      - name: "Run PHP_CodeSniffer"
        run: "vendor/bin/phpcs"

      - name: "Normalize composer.json"
        run: "composer-normalize --dry-run --no-check-lock --no-update-lock"

      - name: "Calculate code coverage"
        run: "vendor/bin/simple-phpunit --colors=always --testdox --testsuite churn-tests --coverage-clover=coverage.xml"

      - name: "Download other code coverage reports"
        uses: actions/download-artifact@v2
        with:
          name: coverage
          path: ./coverage

      - name: "List all coverage reports"
        run: echo coverage_reports=./coverage/$(ls -m coverage/ | sed "s/, */,.\/coverage\//g") >> $GITHUB_ENV

      - uses: codecov/codecov-action@v1
        with:
          files: ./coverage.xml,${{ env.coverage_reports }}
          fail_ci_if_error: true
          verbose: true

  build:
    name: "Build Phar"
    runs-on: ubuntu-latest
    # Build when everything else is ok
    needs: [tests, analysis]

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "none"
          ini-values: "error_reporting=-1, display_errors=On, display_startup_errors=On, zend.assertions=1"
          php-version: "7.2"
          tools: composer:v2

      - name: Get composer cache directory
        id: composercache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache composer dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composercache.outputs.dir }}
          key: composer-${{ runner.os }}-7.1-${{ hashFiles('composer.*') }}
          restore-keys: |
            composer-${{ runner.os }}-7.1-
            composer-${{ runner.os }}-
            composer-

      - name: "Install dependencies"
        run: |
          composer config platform.php 7.1.3
          composer update --no-dev --no-interaction --no-progress --prefer-dist
          composer config --unset platform.php

      - name: "Download Box"
        run: |
          curl -sL https://github.com/box-project/box/releases/download/3.9.1/box.phar -o box.phar
          chmod +x box.phar

      - name: "Validate box configuration"
        run: ./box.phar validate

      - name: "Compile"
        run: ./box.phar compile

      - name: "Test Version"
        run: diff -u <(bin/churn -V) <(./churn.phar -V)

      - name: "Test Phar"
        run: diff -u <(bin/churn run src --format=csv | sort) <(./churn.phar run src --format=csv | sort)

      - name: "Save Phar"
        uses: actions/upload-artifact@v2
        with:
          name: churn.phar
          path: ./churn.phar
          if-no-files-found: error
